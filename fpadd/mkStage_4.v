//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Dec 11 00:45:24 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_feed                       O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// feed_output_stage_3            I    69 reg
// EN_feed                        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStage_4(CLK,
		 RST_N,

		 feed_output_stage_3,
		 EN_feed,
		 RDY_feed);
  input  CLK;
  input  RST_N;

  // action method feed
  input  [68 : 0] feed_output_stage_3;
  input  EN_feed;
  output RDY_feed;

  // signals for module outputs
  wire RDY_feed;

  // ports of submodule input_fifo
  wire [68 : 0] input_fifo$D_IN, input_fifo$D_OUT;
  wire input_fifo$CLR,
       input_fifo$DEQ,
       input_fifo$EMPTY_N,
       input_fifo$ENQ,
       input_fifo$FULL_N;

  // ports of submodule output_fifo
  wire [64 : 0] output_fifo$D_IN;
  wire output_fifo$CLR,
       output_fifo$DEQ,
       output_fifo$EMPTY_N,
       output_fifo$ENQ,
       output_fifo$FULL_N;

  // remaining internal signals
  wire [62 : 0] IF_IF_input_fifo_first_BIT_2_OR_input_fifo_fir_ETC___d188,
		IF_NOT_input_fifo_first_BIT_2_AND_NOT_input_fi_ETC___d199,
		IF_input_fifo_first_BIT_56_1_THEN_input_fifo_f_ETC___d197;
  wire [53 : 0] input_fifoD_OUT_BITS_56_TO_3_SL_IF_input_fifo_ETC__q1,
		input_fifoD_OUT_BITS_56_TO_3_SL_x608__q2;
  wire [51 : 0] _theResult___fst_final_sum_mantissa__h2337;
  wire [10 : 0] IF_input_fifo_first_BIT_2_OR_input_fifo_first__ETC___d176,
		_theResult_____1_fst_final_sum_exponent__h2324,
		_theResult___fst_final_sum_exponent__h2336,
		x__h2608;

  // action method feed
  assign RDY_feed = input_fifo$FULL_N ;

  // submodule input_fifo
  FIFOL1 #( /*width*/ 32'd69) input_fifo(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(input_fifo$D_IN),
					 .ENQ(input_fifo$ENQ),
					 .DEQ(input_fifo$DEQ),
					 .CLR(input_fifo$CLR),
					 .D_OUT(input_fifo$D_OUT),
					 .FULL_N(input_fifo$FULL_N),
					 .EMPTY_N(input_fifo$EMPTY_N));

  // submodule output_fifo
  FIFOL1 #( /*width*/ 32'd65) output_fifo(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(output_fifo$D_IN),
					  .ENQ(output_fifo$ENQ),
					  .DEQ(output_fifo$DEQ),
					  .CLR(output_fifo$CLR),
					  .D_OUT(),
					  .FULL_N(output_fifo$FULL_N),
					  .EMPTY_N(output_fifo$EMPTY_N));

  // submodule input_fifo
  assign input_fifo$D_IN = feed_output_stage_3 ;
  assign input_fifo$ENQ = EN_feed ;
  assign input_fifo$DEQ = input_fifo$EMPTY_N && output_fifo$FULL_N ;
  assign input_fifo$CLR = 1'b0 ;

  // submodule output_fifo
  assign output_fifo$D_IN =
	     { input_fifo$D_OUT[68],
	       IF_NOT_input_fifo_first_BIT_2_AND_NOT_input_fi_ETC___d199,
	       input_fifo$D_OUT[0] } ;
  assign output_fifo$ENQ = input_fifo$EMPTY_N && output_fifo$FULL_N ;
  assign output_fifo$DEQ = output_fifo$EMPTY_N ;
  assign output_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_input_fifo_first_BIT_2_OR_input_fifo_fir_ETC___d188 =
	     (IF_input_fifo_first_BIT_2_OR_input_fifo_first__ETC___d176 <
	      input_fifo$D_OUT[67:57]) ?
	       { _theResult_____1_fst_final_sum_exponent__h2324,
		 input_fifoD_OUT_BITS_56_TO_3_SL_IF_input_fifo_ETC__q1[51:0] } :
	       { 11'b0, input_fifoD_OUT_BITS_56_TO_3_SL_x608__q2[51:0] } ;
  assign IF_NOT_input_fifo_first_BIT_2_AND_NOT_input_fi_ETC___d199 =
	     (!input_fifo$D_OUT[2] && !input_fifo$D_OUT[1] &&
	      !input_fifo$D_OUT[56] &&
	      !input_fifo$D_OUT[55] &&
	      (input_fifo$D_OUT[54] || input_fifo$D_OUT[53] ||
	       input_fifo$D_OUT[52] ||
	       input_fifo$D_OUT[51] ||
	       input_fifo$D_OUT[50] ||
	       input_fifo$D_OUT[49] ||
	       input_fifo$D_OUT[48] ||
	       input_fifo$D_OUT[47] ||
	       input_fifo$D_OUT[46] ||
	       input_fifo$D_OUT[45] ||
	       input_fifo$D_OUT[44] ||
	       input_fifo$D_OUT[43] ||
	       input_fifo$D_OUT[42] ||
	       input_fifo$D_OUT[41] ||
	       input_fifo$D_OUT[40] ||
	       input_fifo$D_OUT[39] ||
	       input_fifo$D_OUT[38] ||
	       input_fifo$D_OUT[37] ||
	       input_fifo$D_OUT[36] ||
	       input_fifo$D_OUT[35] ||
	       input_fifo$D_OUT[34] ||
	       input_fifo$D_OUT[33] ||
	       input_fifo$D_OUT[32] ||
	       input_fifo$D_OUT[31] ||
	       input_fifo$D_OUT[30] ||
	       input_fifo$D_OUT[29] ||
	       input_fifo$D_OUT[28] ||
	       input_fifo$D_OUT[27] ||
	       input_fifo$D_OUT[26] ||
	       input_fifo$D_OUT[25] ||
	       input_fifo$D_OUT[24] ||
	       input_fifo$D_OUT[23] ||
	       input_fifo$D_OUT[22] ||
	       input_fifo$D_OUT[21] ||
	       input_fifo$D_OUT[20] ||
	       input_fifo$D_OUT[19] ||
	       input_fifo$D_OUT[18] ||
	       input_fifo$D_OUT[17] ||
	       input_fifo$D_OUT[16] ||
	       input_fifo$D_OUT[15] ||
	       input_fifo$D_OUT[14] ||
	       input_fifo$D_OUT[13] ||
	       input_fifo$D_OUT[12] ||
	       input_fifo$D_OUT[11] ||
	       input_fifo$D_OUT[10] ||
	       input_fifo$D_OUT[9] ||
	       input_fifo$D_OUT[8] ||
	       input_fifo$D_OUT[7] ||
	       input_fifo$D_OUT[6] ||
	       input_fifo$D_OUT[5] ||
	       input_fifo$D_OUT[4] ||
	       input_fifo$D_OUT[3])) ?
	       IF_IF_input_fifo_first_BIT_2_OR_input_fifo_fir_ETC___d188 :
	       ((input_fifo$D_OUT[2] || input_fifo$D_OUT[1]) ?
		  { input_fifo$D_OUT[67:57], input_fifo$D_OUT[54:3] } :
		  IF_input_fifo_first_BIT_56_1_THEN_input_fifo_f_ETC___d197) ;
  assign IF_input_fifo_first_BIT_2_OR_input_fifo_first__ETC___d176 =
	     (input_fifo$D_OUT[2] || input_fifo$D_OUT[1] ||
	      input_fifo$D_OUT[56] ||
	      input_fifo$D_OUT[55]) ?
	       11'd0 :
	       (input_fifo$D_OUT[54] ?
		  11'd1 :
		  (input_fifo$D_OUT[53] ?
		     11'd2 :
		     (input_fifo$D_OUT[52] ?
			11'd3 :
			(input_fifo$D_OUT[51] ?
			   11'd4 :
			   (input_fifo$D_OUT[50] ?
			      11'd5 :
			      (input_fifo$D_OUT[49] ?
				 11'd6 :
				 (input_fifo$D_OUT[48] ?
				    11'd7 :
				    (input_fifo$D_OUT[47] ?
				       11'd8 :
				       (input_fifo$D_OUT[46] ?
					  11'd9 :
					  (input_fifo$D_OUT[45] ?
					     11'd10 :
					     (input_fifo$D_OUT[44] ?
						11'd11 :
						(input_fifo$D_OUT[43] ?
						   11'd12 :
						   (input_fifo$D_OUT[42] ?
						      11'd13 :
						      (input_fifo$D_OUT[41] ?
							 11'd14 :
							 (input_fifo$D_OUT[40] ?
							    11'd15 :
							    (input_fifo$D_OUT[39] ?
							       11'd16 :
							       (input_fifo$D_OUT[38] ?
								  11'd17 :
								  (input_fifo$D_OUT[37] ?
								     11'd18 :
								     (input_fifo$D_OUT[36] ?
									11'd19 :
									(input_fifo$D_OUT[35] ?
									   11'd20 :
									   (input_fifo$D_OUT[34] ?
									      11'd21 :
									      (input_fifo$D_OUT[33] ?
										 11'd22 :
										 (input_fifo$D_OUT[32] ?
										    11'd23 :
										    (input_fifo$D_OUT[31] ?
										       11'd24 :
										       (input_fifo$D_OUT[30] ?
											  11'd25 :
											  (input_fifo$D_OUT[29] ?
											     11'd26 :
											     (input_fifo$D_OUT[28] ?
												11'd27 :
												(input_fifo$D_OUT[27] ?
												   11'd28 :
												   (input_fifo$D_OUT[26] ?
												      11'd29 :
												      (input_fifo$D_OUT[25] ?
													 11'd30 :
													 (input_fifo$D_OUT[24] ?
													    11'd31 :
													    (input_fifo$D_OUT[23] ?
													       11'd32 :
													       (input_fifo$D_OUT[22] ?
														  11'd33 :
														  (input_fifo$D_OUT[21] ?
														     11'd34 :
														     (input_fifo$D_OUT[20] ?
															11'd35 :
															(input_fifo$D_OUT[19] ?
															   11'd36 :
															   (input_fifo$D_OUT[18] ?
															      11'd37 :
															      (input_fifo$D_OUT[17] ?
																 11'd38 :
																 (input_fifo$D_OUT[16] ?
																    11'd39 :
																    (input_fifo$D_OUT[15] ?
																       11'd40 :
																       (input_fifo$D_OUT[14] ?
																	  11'd41 :
																	  (input_fifo$D_OUT[13] ?
																	     11'd42 :
																	     (input_fifo$D_OUT[12] ?
																		11'd43 :
																		(input_fifo$D_OUT[11] ?
																		   11'd44 :
																		   (input_fifo$D_OUT[10] ?
																		      11'd45 :
																		      (input_fifo$D_OUT[9] ?
																			 11'd46 :
																			 (input_fifo$D_OUT[8] ?
																			    11'd47 :
																			    (input_fifo$D_OUT[7] ?
																			       11'd48 :
																			       (input_fifo$D_OUT[6] ?
																				  11'd49 :
																				  (input_fifo$D_OUT[5] ?
																				     11'd50 :
																				     (input_fifo$D_OUT[4] ?
																					11'd51 :
																					(input_fifo$D_OUT[3] ?
																					   11'd52 :
																					   11'd0)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign IF_input_fifo_first_BIT_56_1_THEN_input_fifo_f_ETC___d197 =
	     input_fifo$D_OUT[56] ?
	       { _theResult___fst_final_sum_exponent__h2336,
		 _theResult___fst_final_sum_mantissa__h2337 } :
	       (input_fifo$D_OUT[55] ?
		  { input_fifo$D_OUT[67:57], input_fifo$D_OUT[54:3] } :
		  63'd0) ;
  assign _theResult_____1_fst_final_sum_exponent__h2324 =
	     input_fifo$D_OUT[67:57] -
	     IF_input_fifo_first_BIT_2_OR_input_fifo_first__ETC___d176 ;
  assign _theResult___fst_final_sum_exponent__h2336 =
	     input_fifo$D_OUT[67:57] + 11'd1 ;
  assign _theResult___fst_final_sum_mantissa__h2337 =
	     (input_fifo$D_OUT[67:57] == 11'd2046) ?
	       52'b0 :
	       input_fifo$D_OUT[55:4] ;
  assign input_fifoD_OUT_BITS_56_TO_3_SL_IF_input_fifo_ETC__q1 =
	     input_fifo$D_OUT[56:3] <<
	     IF_input_fifo_first_BIT_2_OR_input_fifo_first__ETC___d176 ;
  assign input_fifoD_OUT_BITS_56_TO_3_SL_x608__q2 =
	     input_fifo$D_OUT[56:3] << x__h2608 ;
  assign x__h2608 = input_fifo$D_OUT[67:57] - 11'd1 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (input_fifo$EMPTY_N && output_fifo$FULL_N)
	$display("\n**Stage_4_Output**\nOutput:%0b \n Valid:%0b",
		 { input_fifo$D_OUT[68],
		   IF_NOT_input_fifo_first_BIT_2_AND_NOT_input_fi_ETC___d199 },
		 input_fifo$D_OUT[0]);
  end
  // synopsys translate_on
endmodule  // mkStage_4

