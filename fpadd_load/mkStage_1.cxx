/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Nov 26 23:37:20 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkStage_1.h"


/* Constructor */
MOD_mkStage_1::MOD_mkStage_1(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_input_1(simHdl, "input_1", this, 64u, 0llu, (tUInt8)0u),
    INST_input_2(simHdl, "input_2", this, 64u, 0llu, (tUInt8)0u),
    INST_is_valid(simHdl, "is_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45(153u),
    DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44(131u),
    DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43(119u)
{
  PORT_get_stage_1.setSize(155u);
  PORT_get_stage_1.clear();
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkStage_1::init_symbols_0()
{
  init_symbol(&symbols[0u], "get_stage_1", SYM_PORT, &PORT_get_stage_1, 155u);
  init_symbol(&symbols[1u], "input_1", SYM_MODULE, &INST_input_1);
  init_symbol(&symbols[2u], "input_2", SYM_MODULE, &INST_input_2);
  init_symbol(&symbols[3u], "is_valid", SYM_MODULE, &INST_is_valid);
}


/* Rule actions */


/* Methods */

void MOD_mkStage_1::METH_feed(tUInt64 ARG_feed_input_1,
			      tUInt64 ARG_feed_input_2,
			      tUInt8 ARG_feed_is_valid)
{
  INST_input_1.METH_write(ARG_feed_input_1);
  INST_input_2.METH_write(ARG_feed_input_2);
  INST_is_valid.METH_write(ARG_feed_is_valid);
}

tUInt8 MOD_mkStage_1::METH_RDY_feed()
{
  tUInt8 DEF_CAN_FIRE_feed;
  tUInt8 PORT_RDY_feed;
  DEF_CAN_FIRE_feed = (tUInt8)1u;
  PORT_RDY_feed = DEF_CAN_FIRE_feed;
  return PORT_RDY_feed;
}

tUWide MOD_mkStage_1::METH_get_stage_1()
{
  tUInt64 DEF_x__h1128;
  tUInt64 DEF_x__h1126;
  tUInt8 DEF_NOT_input_1_BITS_51_TO_0_EQ_0b0___d29;
  tUInt8 DEF_NOT_input_2_BITS_51_TO_0_3_EQ_0b0_4___d32;
  tUInt8 DEF_input_1_BITS_62_TO_52_EQ_0b11111111111___d28;
  tUInt8 DEF_input_2_BITS_62_TO_52_1_EQ_0b11111111111___d31;
  tUInt8 DEF_input_1_BITS_62_TO_52_EQ_0b0___d6;
  tUInt32 DEF__theResult_____1_exponent_input_1__h952;
  tUInt8 DEF_input_1_BITS_51_TO_0_EQ_0b0___d8;
  tUInt8 DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14;
  tUInt8 DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12;
  tUInt32 DEF__theResult_____1_exponent_input_2__h953;
  tUInt8 DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d17;
  tUInt32 DEF_x__h1121;
  tUInt8 DEF_x__h1110;
  tUInt8 DEF_x__h240;
  tUInt32 DEF__read_exponent__h255;
  tUInt32 DEF__read_exponent__h361;
  tUInt64 DEF__read_mantissa__h256;
  tUInt64 DEF__read_mantissa__h362;
  tUInt8 DEF_is_valid__h1170;
  tUInt64 DEF_input_1___d1;
  tUInt64 DEF_input_2___d3;
  DEF_input_2___d3 = INST_input_2.METH_read();
  DEF_input_1___d1 = INST_input_1.METH_read();
  DEF_is_valid__h1170 = INST_is_valid.METH_read();
  DEF__read_mantissa__h362 = (tUInt64)(4503599627370495llu & DEF_input_1___d1);
  DEF__read_exponent__h361 = (tUInt32)(2047u & (DEF_input_1___d1 >> 52u));
  DEF__read_mantissa__h256 = (tUInt64)(4503599627370495llu & DEF_input_2___d3);
  DEF__read_exponent__h255 = (tUInt32)(2047u & (DEF_input_2___d3 >> 52u));
  DEF_x__h240 = (tUInt8)(DEF_input_1___d1 >> 63u);
  DEF_x__h1110 = (tUInt8)(DEF_input_2___d3 >> 63u);
  DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12 = DEF__read_exponent__h255 == 0u;
  DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14 = DEF__read_mantissa__h256 == 0llu;
  DEF__theResult_____1_exponent_input_2__h953 = DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12 ? (DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14 ? DEF__read_exponent__h255 : 1u) : DEF__read_exponent__h255;
  DEF_input_1_BITS_51_TO_0_EQ_0b0___d8 = DEF__read_mantissa__h362 == 0llu;
  DEF_input_1_BITS_62_TO_52_EQ_0b0___d6 = DEF__read_exponent__h361 == 0u;
  DEF__theResult_____1_exponent_input_1__h952 = DEF_input_1_BITS_62_TO_52_EQ_0b0___d6 ? (DEF_input_1_BITS_51_TO_0_EQ_0b0___d8 ? DEF__read_exponent__h361 : 1u) : DEF__read_exponent__h361;
  DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d17 = DEF__theResult_____1_exponent_input_1__h952 < DEF__theResult_____1_exponent_input_2__h953;
  DEF_x__h1121 = DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d17 ? 2047u & (DEF__theResult_____1_exponent_input_2__h953 - DEF__theResult_____1_exponent_input_1__h952) : 2047u & (DEF__theResult_____1_exponent_input_1__h952 - DEF__theResult_____1_exponent_input_2__h953);
  DEF_input_2_BITS_62_TO_52_1_EQ_0b11111111111___d31 = DEF__read_exponent__h255 == 2047u;
  DEF_NOT_input_2_BITS_51_TO_0_3_EQ_0b0_4___d32 = !DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14;
  DEF_input_1_BITS_62_TO_52_EQ_0b11111111111___d28 = DEF__read_exponent__h361 == 2047u;
  DEF_NOT_input_1_BITS_51_TO_0_EQ_0b0___d29 = !DEF_input_1_BITS_51_TO_0_EQ_0b0___d8;
  DEF_x__h1126 = 36028797018963967llu & ((((tUInt64)(DEF_input_1_BITS_62_TO_52_EQ_0b0___d6 ? (tUInt8)0u : (tUInt8)1u)) << 52u) | DEF__read_mantissa__h362);
  DEF_x__h1128 = 36028797018963967llu & ((((tUInt64)(DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12 ? (tUInt8)0u : (tUInt8)1u)) << 52u) | DEF__read_mantissa__h256);
  DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43.set_bits_in_word((tUInt32)(DEF_x__h1126 >> 32u),
										3u,
										0u,
										23u).build_concat((((tUInt64)((tUInt32)(DEF_x__h1126))) << 32u) | (tUInt64)((tUInt32)(DEF_x__h1128 >> 23u)),
												  32u,
												  64u).set_whole_word((((((((((((tUInt32)(8388607u & DEF_x__h1128)) << 9u) | (((tUInt32)(DEF_input_1_BITS_62_TO_52_EQ_0b0___d6 && DEF_input_1_BITS_51_TO_0_EQ_0b0___d8)) << 8u)) | (((tUInt32)(DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12 && DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14)) << 7u)) | (((tUInt32)(DEF_input_1_BITS_62_TO_52_EQ_0b11111111111___d28 && DEF_NOT_input_1_BITS_51_TO_0_EQ_0b0___d29)) << 6u)) | (((tUInt32)(DEF_input_2_BITS_62_TO_52_1_EQ_0b11111111111___d31 && DEF_NOT_input_2_BITS_51_TO_0_3_EQ_0b0_4___d32)) << 5u)) | (((tUInt32)(DEF_input_1_BITS_62_TO_52_EQ_0b11111111111___d28 && DEF_input_1_BITS_51_TO_0_EQ_0b0___d8)) << 4u)) | (((tUInt32)(DEF_input_2_BITS_62_TO_52_1_EQ_0b11111111111___d31 && DEF_input_2_BITS_51_TO_0_3_EQ_0b0___d14)) << 3u)) | (((tUInt32)(DEF_input_1_BITS_62_TO_52_EQ_0b0___d6 && DEF_NOT_input_1_BITS_51_TO_0_EQ_0b0___d29)) << 2u)) | (((tUInt32)(DEF_input_2_BITS_62_TO_52_1_EQ_0b0___d12 && DEF_NOT_input_2_BITS_51_TO_0_3_EQ_0b0_4___d32)) << 1u)) | (tUInt32)(DEF_is_valid__h1170),
														      0u);
  DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.set_bits_in_word((tUInt8)(DEF_x__h1121 >> 8u),
										4u,
										0u,
										3u).set_whole_word(((((tUInt32)((tUInt8)((tUInt8)255u & DEF_x__h1121))) << 24u) | (((tUInt32)(!DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d17)) << 23u)) | DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43.get_bits_in_word32(3u,
																																									 0u,
																																									 23u),
												   3u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43.get_whole_word(2u),
														      2u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43.get_whole_word(1u),
																	 1u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43.get_whole_word(0u),
																			    0u);
  DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.set_bits_in_word(33554431u & (((DEF__theResult_____1_exponent_input_1__h952 << 14u) | (DEF__theResult_____1_exponent_input_2__h953 << 3u)) | (tUInt32)(DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.get_bits_in_word8(4u,
																																				     0u,
																																				     3u))),
										4u,
										0u,
										25u).set_whole_word(DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.get_whole_word(3u),
												    3u).set_whole_word(DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.get_whole_word(2u),
														       2u).set_whole_word(DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.get_whole_word(1u),
																	  1u).set_whole_word(DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44.get_whole_word(0u),
																			     0u);
  PORT_get_stage_1.set_bits_in_word(134217727u & (((((tUInt32)(DEF_x__h240)) << 26u) | (((tUInt32)(DEF_x__h1110)) << 25u)) | DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.get_bits_in_word32(4u,
																									     0u,
																									     25u)),
				    4u,
				    0u,
				    27u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.get_whole_word(3u),
							3u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.get_whole_word(2u),
									   2u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.get_whole_word(1u),
											      1u).set_whole_word(DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45.get_whole_word(0u),
														 0u);
  return PORT_get_stage_1;
}

tUInt8 MOD_mkStage_1::METH_RDY_get_stage_1()
{
  tUInt8 DEF_CAN_FIRE_get_stage_1;
  tUInt8 PORT_RDY_get_stage_1;
  DEF_CAN_FIRE_get_stage_1 = (tUInt8)1u;
  PORT_RDY_get_stage_1 = DEF_CAN_FIRE_get_stage_1;
  return PORT_RDY_get_stage_1;
}


/* Reset routines */

void MOD_mkStage_1::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_is_valid.reset_RST(ARG_rst_in);
  INST_input_2.reset_RST(ARG_rst_in);
  INST_input_1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkStage_1::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkStage_1::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_input_1.dump_state(indent + 2u);
  INST_input_2.dump_state(indent + 2u);
  INST_is_valid.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkStage_1::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44", 131u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43", 119u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45", 153u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "get_stage_1", 155u);
  num = INST_input_1.dump_VCD_defs(num);
  num = INST_input_2.dump_VCD_defs(num);
  num = INST_is_valid.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkStage_1::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkStage_1 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkStage_1::vcd_defs(tVCDDumpType dt, MOD_mkStage_1 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 131u);
    vcd_write_x(sim_hdl, num++, 119u);
    vcd_write_x(sim_hdl, num++, 153u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 155u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44) != DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44, 131u);
	backing.DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44 = DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44;
      }
      ++num;
      if ((backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43) != DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43, 119u);
	backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43 = DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43;
      }
      ++num;
      if ((backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45) != DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45, 153u);
	backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45 = DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_get_stage_1) != PORT_get_stage_1)
      {
	vcd_write_val(sim_hdl, num, PORT_get_stage_1, 155u);
	backing.PORT_get_stage_1 = PORT_get_stage_1;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44, 131u);
      backing.DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44 = DEF_IF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_inp_ETC___d44;
      vcd_write_val(sim_hdl, num++, DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43, 119u);
      backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43 = DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_0b0_ELSE__ETC___d43;
      vcd_write_val(sim_hdl, num++, DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45, 153u);
      backing.DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45 = DEF_IF_input_1_BITS_62_TO_52_EQ_0b0_THEN_IF_input__ETC___d45;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_get_stage_1, 155u);
      backing.PORT_get_stage_1 = PORT_get_stage_1;
    }
}

void MOD_mkStage_1::vcd_prims(tVCDDumpType dt, MOD_mkStage_1 &backing)
{
  INST_input_1.dump_VCD(dt, backing.INST_input_1);
  INST_input_2.dump_VCD(dt, backing.INST_input_2);
  INST_is_valid.dump_VCD(dt, backing.INST_is_valid);
}
