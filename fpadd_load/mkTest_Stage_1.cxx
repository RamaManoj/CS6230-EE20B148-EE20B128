/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Nov 26 23:37:20 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTest_Stage_1.h"


/* String declarations */
static std::string const __str_literal_1("sign:%0b \nmantissa:%0b \nexponent:%0b\nexponent_diff:%0b",
					 54u);


/* Constructor */
MOD_mkTest_Stage_1::MOD_mkTest_Stage_1(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut(simHdl, "dut", this),
    PORT_RST_N((tUInt8)1u),
    DEF_dut_get_stage_1____d1(155u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTest_Stage_1::init_symbols_0()
{
  init_symbol(&symbols[0u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[1u], "RL_rl_stage_1_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTest_Stage_1::RL_rl_stage_1_test()
{
  tUInt8 DEF_dut_get_stage_1_BIT_0___d2;
  tUInt8 DEF_x_get_stage_1_sign_input_1__h157;
  tUInt32 DEF_x_get_stage_1_exponent_diff__h161;
  tUInt32 DEF_x_get_stage_1_exponent_input_1__h159;
  tUInt64 DEF_x_get_stage_1_mantissa_input_1__h163;
  DEF_dut_get_stage_1____d1 = INST_dut.METH_get_stage_1();
  DEF_x_get_stage_1_mantissa_input_1__h163 = primExtract64(55u,
							   155u,
							   DEF_dut_get_stage_1____d1,
							   32u,
							   118u,
							   32u,
							   64u);
  DEF_x_get_stage_1_exponent_input_1__h159 = DEF_dut_get_stage_1____d1.get_bits_in_word32(4u,
											  14u,
											  11u);
  DEF_x_get_stage_1_exponent_diff__h161 = primExtract32(11u,
							155u,
							DEF_dut_get_stage_1____d1,
							32u,
							130u,
							32u,
							120u);
  DEF_x_get_stage_1_sign_input_1__h157 = DEF_dut_get_stage_1____d1.get_bits_in_word8(4u, 26u, 1u);
  DEF_dut_get_stage_1_BIT_0___d2 = DEF_dut_get_stage_1____d1.get_bits_in_word8(0u, 0u, 1u);
  INST_dut.METH_feed(13855605728582041600llu, 13855605728582041600llu, (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_dut_get_stage_1_BIT_0___d2)
      dollar_display(sim_hdl,
		     this,
		     "s,1,55,11,11",
		     &__str_literal_1,
		     DEF_x_get_stage_1_sign_input_1__h157,
		     DEF_x_get_stage_1_mantissa_input_1__h163,
		     DEF_x_get_stage_1_exponent_input_1__h159,
		     DEF_x_get_stage_1_exponent_diff__h161);
    if (DEF_dut_get_stage_1_BIT_0___d2)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTest_Stage_1::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTest_Stage_1::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTest_Stage_1::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTest_Stage_1::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_get_stage_1____d1", 155u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTest_Stage_1::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTest_Stage_1 &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTest_Stage_1::vcd_defs(tVCDDumpType dt, MOD_mkTest_Stage_1 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 155u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_dut_get_stage_1____d1) != DEF_dut_get_stage_1____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_get_stage_1____d1, 155u);
	backing.DEF_dut_get_stage_1____d1 = DEF_dut_get_stage_1____d1;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_dut_get_stage_1____d1, 155u);
      backing.DEF_dut_get_stage_1____d1 = DEF_dut_get_stage_1____d1;
    }
}

void MOD_mkTest_Stage_1::vcd_submodules(tVCDDumpType dt,
					unsigned int levels,
					MOD_mkTest_Stage_1 &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
